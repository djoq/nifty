{"ast":null,"code":"/**\n * An immutable canvas pool allowing more efficient use of canvas resources\n *\n * @typedef {Object} CanvasPool\n * @property {Function} pop - return a promise that will evaluate to a canvas\n * @property {Number} length - the number of available canvas elements\n * @property {HTMLCanvasElement[]} elements - the canvas elements used by the pool\n * @property {Function} clear - empty the pool of canvas elements\n * @property {Function} release - free a pool up for release and return the data url\n */\n\n/**\n * Create a CanvasPool with the given size\n *\n * @param {Number} size\n * @param {HTMLCanvasElement[]} elements\n * @param {EventEmitter} eventEmitter\n * @return {CanvasPool}\n */\nexport function CanvasPool() {\n  const canvases = [];\n  return {\n    /**\n     * Get the next available canvas from the pool\n     *\n     * @return {HTMLCanvasElement}\n     */\n    pop() {\n      if (this.length === 0) {\n        canvases.push(document.createElement('canvas'));\n      }\n\n      return canvases.pop();\n    },\n\n    /**\n     * Return the number of available canvas elements in the pool\n     *\n     * @return {Number}\n     */\n    get length() {\n      return canvases.length;\n    },\n\n    /**\n     * Return a canvas to the pool. This function will clear the canvas for reuse\n     *\n     * @param {HTMLCanvasElement} canvas\n     * @return {String}\n     */\n    release(canvas) {\n      const context = canvas.getContext('2d');\n      context.clearRect(0, 0, canvas.width, canvas.height);\n      canvases.push(canvas);\n    },\n\n    /**\n     * Empty the pool, destroying any references to canvas objects\n     */\n    clear() {\n      canvases.splice(0, canvases.length);\n    },\n\n    /**\n     * Return the collection of canvases in the pool\n     *\n     * @return {HTMLCanvasElement[]}\n     */\n    get elements() {\n      return canvases;\n    }\n\n  };\n}\nconst shared = CanvasPool();\nexport default shared;","map":{"version":3,"sources":["/home/danny/apps/sandbox/nifty/node_modules/watermarkjs/lib/canvas/pool.js"],"names":["CanvasPool","canvases","pop","length","push","document","createElement","release","canvas","context","getContext","clearRect","width","height","clear","splice","elements","shared"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,UAAT,GAAsB;AAC3B,QAAMC,QAAQ,GAAG,EAAjB;AAEA,SAAO;AACL;AACJ;AACA;AACA;AACA;AACIC,IAAAA,GAAG,GAAG;AACJ,UAAI,KAAKC,MAAL,KAAgB,CAApB,EAAuB;AACrBF,QAAAA,QAAQ,CAACG,IAAT,CAAcC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAd;AACD;;AAED,aAAOL,QAAQ,CAACC,GAAT,EAAP;AACD,KAZI;;AAcL;AACJ;AACA;AACA;AACA;AACI,QAAIC,MAAJ,GAAa;AACX,aAAOF,QAAQ,CAACE,MAAhB;AACD,KArBI;;AAuBL;AACJ;AACA;AACA;AACA;AACA;AACII,IAAAA,OAAO,CAACC,MAAD,EAAS;AACd,YAAMC,OAAO,GAAGD,MAAM,CAACE,UAAP,CAAkB,IAAlB,CAAhB;AACAD,MAAAA,OAAO,CAACE,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwBH,MAAM,CAACI,KAA/B,EAAsCJ,MAAM,CAACK,MAA7C;AACAZ,MAAAA,QAAQ,CAACG,IAAT,CAAcI,MAAd;AACD,KAjCI;;AAmCL;AACJ;AACA;AACIM,IAAAA,KAAK,GAAG;AACNb,MAAAA,QAAQ,CAACc,MAAT,CAAgB,CAAhB,EAAmBd,QAAQ,CAACE,MAA5B;AACD,KAxCI;;AA0CL;AACJ;AACA;AACA;AACA;AACI,QAAIa,QAAJ,GAAe;AACb,aAAOf,QAAP;AACD;;AAjDI,GAAP;AAmDD;AAED,MAAMgB,MAAM,GAAGjB,UAAU,EAAzB;AACA,eAAeiB,MAAf","sourcesContent":["/**\n * An immutable canvas pool allowing more efficient use of canvas resources\n *\n * @typedef {Object} CanvasPool\n * @property {Function} pop - return a promise that will evaluate to a canvas\n * @property {Number} length - the number of available canvas elements\n * @property {HTMLCanvasElement[]} elements - the canvas elements used by the pool\n * @property {Function} clear - empty the pool of canvas elements\n * @property {Function} release - free a pool up for release and return the data url\n */\n\n/**\n * Create a CanvasPool with the given size\n *\n * @param {Number} size\n * @param {HTMLCanvasElement[]} elements\n * @param {EventEmitter} eventEmitter\n * @return {CanvasPool}\n */\nexport function CanvasPool() {\n  const canvases = [];\n\n  return {\n    /**\n     * Get the next available canvas from the pool\n     *\n     * @return {HTMLCanvasElement}\n     */\n    pop() {\n      if (this.length === 0) {\n        canvases.push(document.createElement('canvas'));\n      }\n\n      return canvases.pop();\n    },\n\n    /**\n     * Return the number of available canvas elements in the pool\n     *\n     * @return {Number}\n     */\n    get length() {\n      return canvases.length;\n    },\n\n    /**\n     * Return a canvas to the pool. This function will clear the canvas for reuse\n     *\n     * @param {HTMLCanvasElement} canvas\n     * @return {String}\n     */\n    release(canvas) {\n      const context = canvas.getContext('2d');\n      context.clearRect(0, 0, canvas.width, canvas.height);\n      canvases.push(canvas);\n    },\n\n    /**\n     * Empty the pool, destroying any references to canvas objects\n     */\n    clear() {\n      canvases.splice(0, canvases.length);\n    },\n\n    /**\n     * Return the collection of canvases in the pool\n     *\n     * @return {HTMLCanvasElement[]}\n     */\n    get elements() {\n      return canvases;\n    }\n  }\n}\n\nconst shared = CanvasPool();\nexport default shared;\n"]},"metadata":{},"sourceType":"module"}