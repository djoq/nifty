{"ast":null,"code":"/**\n * Return a function for positioning a watermark on a target canvas\n *\n * @param {Function} xFn - a function to determine an x value\n * @param {Function} yFn - a function to determine a y value\n * @param {Number} alpha\n * @return {Function}\n */\nexport function atPos(xFn, yFn, alpha) {\n  alpha || (alpha = 1.0);\n  return function (target, watermark) {\n    const context = target.getContext('2d');\n    context.save();\n    context.globalAlpha = alpha;\n    context.drawImage(watermark, xFn(target, watermark), yFn(target, watermark));\n    context.restore();\n    return target;\n  };\n}\n/**\n * Place the watermark in the lower right corner of the target\n * image\n *\n * @param {Number} alpha\n * @return {Function}\n */\n\nexport function lowerRight(alpha) {\n  return atPos((target, mark) => target.width - (mark.width + 10), (target, mark) => target.height - (mark.height + 10), alpha);\n}\n/**\n * Place the watermark in the upper right corner of the target\n * image\n *\n * @param {Number} alpha\n * @return {Function}\n */\n\nexport function upperRight(alpha) {\n  return atPos((target, mark) => target.width - (mark.width + 10), (target, mark) => 10, alpha);\n}\n/**\n * Place the watermark in the lower left corner of the target\n * image\n *\n * @param {Number} alpha\n * @return {Function}\n */\n\nexport function lowerLeft(alpha) {\n  return atPos((target, mark) => 10, (target, mark) => target.height - (mark.height + 10), alpha);\n}\n/**\n * Place the watermark in the upper left corner of the target\n * image\n *\n * @param {Number} alpha\n * @return {Function}\n */\n\nexport function upperLeft(alpha) {\n  return atPos((target, mark) => 10, (target, mark) => 10, alpha);\n}\n/**\n * Place the watermark in the center of the target\n * image\n *\n * @param {Number} alpha\n * @return {Function}\n */\n\nexport function center(alpha) {\n  return atPos((target, mark) => (target.width - mark.width) / 2, (target, mark) => (target.height - mark.height) / 2, alpha);\n}","map":{"version":3,"sources":["/home/danny/apps/sandbox/nifty/node_modules/watermarkjs/lib/style/image/index.js"],"names":["atPos","xFn","yFn","alpha","target","watermark","context","getContext","save","globalAlpha","drawImage","restore","lowerRight","mark","width","height","upperRight","lowerLeft","upperLeft","center"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,KAAT,CAAeC,GAAf,EAAoBC,GAApB,EAAyBC,KAAzB,EAAgC;AACrCA,EAAAA,KAAK,KAAKA,KAAK,GAAG,GAAb,CAAL;AACA,SAAO,UAAUC,MAAV,EAAkBC,SAAlB,EAA6B;AAClC,UAAMC,OAAO,GAAGF,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAhB;AACAD,IAAAA,OAAO,CAACE,IAAR;AAEAF,IAAAA,OAAO,CAACG,WAAR,GAAsBN,KAAtB;AACAG,IAAAA,OAAO,CAACI,SAAR,CAAkBL,SAAlB,EAA6BJ,GAAG,CAACG,MAAD,EAASC,SAAT,CAAhC,EAAqDH,GAAG,CAACE,MAAD,EAASC,SAAT,CAAxD;AAEAC,IAAAA,OAAO,CAACK,OAAR;AACA,WAAOP,MAAP;AACD,GATD;AAUD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASQ,UAAT,CAAoBT,KAApB,EAA2B;AAChC,SAAOH,KAAK,CACV,CAACI,MAAD,EAASS,IAAT,KAAkBT,MAAM,CAACU,KAAP,IAAgBD,IAAI,CAACC,KAAL,GAAa,EAA7B,CADR,EAEV,CAACV,MAAD,EAASS,IAAT,KAAkBT,MAAM,CAACW,MAAP,IAAiBF,IAAI,CAACE,MAAL,GAAc,EAA/B,CAFR,EAGVZ,KAHU,CAAZ;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASa,UAAT,CAAoBb,KAApB,EAA2B;AAChC,SAAOH,KAAK,CACV,CAACI,MAAD,EAASS,IAAT,KAAkBT,MAAM,CAACU,KAAP,IAAgBD,IAAI,CAACC,KAAL,GAAa,EAA7B,CADR,EAEV,CAACV,MAAD,EAASS,IAAT,KAAkB,EAFR,EAGVV,KAHU,CAAZ;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASc,SAAT,CAAmBd,KAAnB,EAA0B;AAC/B,SAAOH,KAAK,CACV,CAACI,MAAD,EAASS,IAAT,KAAkB,EADR,EAEV,CAACT,MAAD,EAASS,IAAT,KAAkBT,MAAM,CAACW,MAAP,IAAiBF,IAAI,CAACE,MAAL,GAAc,EAA/B,CAFR,EAGVZ,KAHU,CAAZ;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASe,SAAT,CAAmBf,KAAnB,EAA0B;AAC/B,SAAOH,KAAK,CACV,CAACI,MAAD,EAASS,IAAT,KAAkB,EADR,EAEV,CAACT,MAAD,EAASS,IAAT,KAAkB,EAFR,EAGVV,KAHU,CAAZ;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASgB,MAAT,CAAgBhB,KAAhB,EAAuB;AAC5B,SAAOH,KAAK,CACV,CAACI,MAAD,EAASS,IAAT,KAAkB,CAACT,MAAM,CAACU,KAAP,GAAeD,IAAI,CAACC,KAArB,IAA8B,CADtC,EAEV,CAACV,MAAD,EAASS,IAAT,KAAkB,CAACT,MAAM,CAACW,MAAP,GAAgBF,IAAI,CAACE,MAAtB,IAAgC,CAFxC,EAGVZ,KAHU,CAAZ;AAKD","sourcesContent":["/**\n * Return a function for positioning a watermark on a target canvas\n *\n * @param {Function} xFn - a function to determine an x value\n * @param {Function} yFn - a function to determine a y value\n * @param {Number} alpha\n * @return {Function}\n */\nexport function atPos(xFn, yFn, alpha) {\n  alpha || (alpha = 1.0);\n  return function (target, watermark) {\n    const context = target.getContext('2d');\n    context.save();\n\n    context.globalAlpha = alpha;\n    context.drawImage(watermark, xFn(target, watermark), yFn(target, watermark));\n\n    context.restore();\n    return target;\n  }\n}\n\n\n/**\n * Place the watermark in the lower right corner of the target\n * image\n *\n * @param {Number} alpha\n * @return {Function}\n */\nexport function lowerRight(alpha) {\n  return atPos(\n    (target, mark) => target.width - (mark.width + 10),\n    (target, mark) => target.height - (mark.height + 10),\n    alpha\n  );\n}\n\n/**\n * Place the watermark in the upper right corner of the target\n * image\n *\n * @param {Number} alpha\n * @return {Function}\n */\nexport function upperRight(alpha) {\n  return atPos(\n    (target, mark) => target.width - (mark.width + 10),\n    (target, mark) => 10,\n    alpha\n  );\n}\n\n/**\n * Place the watermark in the lower left corner of the target\n * image\n *\n * @param {Number} alpha\n * @return {Function}\n */\nexport function lowerLeft(alpha) {\n  return atPos(\n    (target, mark) => 10,\n    (target, mark) => target.height - (mark.height + 10),\n    alpha\n  );\n}\n\n/**\n * Place the watermark in the upper left corner of the target\n * image\n *\n * @param {Number} alpha\n * @return {Function}\n */\nexport function upperLeft(alpha) {\n  return atPos(\n    (target, mark) => 10,\n    (target, mark) => 10,\n    alpha\n  );\n}\n\n/**\n * Place the watermark in the center of the target\n * image\n *\n * @param {Number} alpha\n * @return {Function}\n */\nexport function center(alpha) {\n  return atPos(\n    (target, mark) => (target.width - mark.width) / 2,\n    (target, mark) => (target.height - mark.height) / 2,\n    alpha\n  );\n}\n"]},"metadata":{},"sourceType":"module"}