{"ast":null,"code":"/**\n * Return a function for positioning a watermark on a target canvas\n *\n * @param {Function} xFn - a function to determine an x value\n * @param {Function} yFn - a function to determine a y value\n * @param {String} text - the text to write\n * @param {String} font - same as the CSS font property\n * @param {String} fillStyle\n * @param {Number} alpha\n * @return {Function}\n */\nexport function atPos(xFn, yFn, text, font, fillStyle, alpha) {\n  alpha || (alpha = 1.0);\n  return function (target) {\n    var context = target.getContext('2d');\n    context.save();\n    context.globalAlpha = alpha;\n    context.fillStyle = fillStyle;\n    context.font = font;\n    var metrics = context.measureText(text);\n    context.fillText(text, xFn(target, metrics, context), yFn(target, metrics, context));\n    context.restore();\n    return target;\n  };\n}\n/**\n * Write text to the lower right corner of the target canvas\n *\n * @param {String} text - the text to write\n * @param {String} font - same as the CSS font property\n * @param {String} fillStyle\n * @param {Number} alpha - control text transparency\n * @param {Number} y - height in text metrics is not very well supported. This is a manual value\n * @return {Function}\n */\n\nexport function lowerRight(text, font, fillStyle, alpha, y) {\n  return atPos(function (target, metrics) {\n    return target.width - (metrics.width + 10);\n  }, function (target) {\n    return y || target.height - 10;\n  }, text, font, fillStyle, alpha);\n}\n/**\n * Write text to the lower left corner of the target canvas\n *\n * @param {String} text - the text to write\n * @param {String} font - same as the CSS font property\n * @param {String} fillStyle\n * @param {Number} alpha - control text transparency\n * @param {Number} y - height in text metrics is not very well supported. This is a manual value\n * @return {Function}\n */\n\nexport function lowerLeft(text, font, fillStyle, alpha, y) {\n  return atPos(function () {\n    return 10;\n  }, function (target) {\n    return y || target.height - 10;\n  }, text, font, fillStyle, alpha);\n}\n/**\n * Write text to the upper right corner of the target canvas\n *\n * @param {String} text - the text to write\n * @param {String} font - same as the CSS font property\n * @param {String} fillStyle\n * @param {Number} alpha - control text transparency\n * @param {Number} y - height in text metrics is not very well supported. This is a manual value\n * @return {Function}\n */\n\nexport function upperRight(text, font, fillStyle, alpha, y) {\n  return atPos(function (target, metrics) {\n    return target.width - (metrics.width + 10);\n  }, function () {\n    return y || 20;\n  }, text, font, fillStyle, alpha);\n}\n/**\n * Write text to the upper left corner of the target canvas\n *\n * @param {String} text - the text to write\n * @param {String} font - same as the CSS font property\n * @param {String} fillStyle\n * @param {Number} alpha - control text transparency\n * @param {Number} y - height in text metrics is not very well supported. This is a manual value\n * @return {Function}\n */\n\nexport function upperLeft(text, font, fillStyle, alpha, y) {\n  return atPos(function () {\n    return 10;\n  }, function () {\n    return y || 20;\n  }, text, font, fillStyle, alpha);\n}\n/**\n * Write text to the center of the target canvas\n *\n * @param {String} text - the text to write\n * @param {String} font - same as the CSS font property\n * @param {String} fillStyle\n * @param {Number} alpha - control text transparency\n * @param {Number} y - height in text metrics is not very well supported. This is a manual value\n * @return {Function}\n */\n\nexport function center(text, font, fillStyle, alpha, y) {\n  return atPos(function (target, metrics, ctx) {\n    ctx.textAlign = 'center';\n    return target.width / 2;\n  }, function (target, metrics, ctx) {\n    ctx.textBaseline = 'middle';\n    return target.height / 2;\n  }, text, font, fillStyle, alpha);\n}","map":{"version":3,"sources":["/home/danny/apps/sandbox/nifty/node_modules/watermarkjs/lib/style/text/index.js"],"names":["atPos","xFn","yFn","text","font","fillStyle","alpha","target","context","getContext","save","globalAlpha","metrics","measureText","fillText","restore","lowerRight","y","width","height","lowerLeft","upperRight","upperLeft","center","ctx","textAlign","textBaseline"],"mappings":"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","sourcesContent":["/**\n * Return a function for positioning a watermark on a target canvas\n *\n * @param {Function} xFn - a function to determine an x value\n * @param {Function} yFn - a function to determine a y value\n * @param {String} text - the text to write\n * @param {String} font - same as the CSS font property\n * @param {String} fillStyle\n * @param {Number} alpha\n * @return {Function}\n */\nexport function atPos(xFn, yFn, text, font, fillStyle, alpha) {\n  alpha || (alpha = 1.0);\n  return function (target) {\n    const context = target.getContext('2d');\n    context.save();\n\n    context.globalAlpha = alpha;\n    context.fillStyle = fillStyle;\n    context.font = font;\n    let metrics = context.measureText(text);\n    context.fillText(text, xFn(target, metrics, context), yFn(target, metrics, context));\n\n    context.restore();\n    return target;\n  }\n}\n\n/**\n * Write text to the lower right corner of the target canvas\n *\n * @param {String} text - the text to write\n * @param {String} font - same as the CSS font property\n * @param {String} fillStyle\n * @param {Number} alpha - control text transparency\n * @param {Number} y - height in text metrics is not very well supported. This is a manual value\n * @return {Function}\n */\nexport function lowerRight(text, font, fillStyle, alpha, y) {\n  return atPos(\n    (target, metrics) => target.width - (metrics.width + 10),\n    target => y || (target.height - 10),\n    text,\n    font,\n    fillStyle,\n    alpha\n  );\n}\n\n/**\n * Write text to the lower left corner of the target canvas\n *\n * @param {String} text - the text to write\n * @param {String} font - same as the CSS font property\n * @param {String} fillStyle\n * @param {Number} alpha - control text transparency\n * @param {Number} y - height in text metrics is not very well supported. This is a manual value\n * @return {Function}\n */\nexport function lowerLeft(text, font, fillStyle, alpha, y) {\n  return atPos(\n    () => 10,\n    target => y || (target.height - 10),\n    text,\n    font,\n    fillStyle,\n    alpha\n  );\n}\n\n/**\n * Write text to the upper right corner of the target canvas\n *\n * @param {String} text - the text to write\n * @param {String} font - same as the CSS font property\n * @param {String} fillStyle\n * @param {Number} alpha - control text transparency\n * @param {Number} y - height in text metrics is not very well supported. This is a manual value\n * @return {Function}\n */\nexport function upperRight(text, font, fillStyle, alpha, y) {\n  return atPos(\n    (target, metrics) => target.width - (metrics.width + 10),\n    () => y || 20,\n    text,\n    font,\n    fillStyle,\n    alpha\n  );\n}\n\n/**\n * Write text to the upper left corner of the target canvas\n *\n * @param {String} text - the text to write\n * @param {String} font - same as the CSS font property\n * @param {String} fillStyle\n * @param {Number} alpha - control text transparency\n * @param {Number} y - height in text metrics is not very well supported. This is a manual value\n * @return {Function}\n */\nexport function upperLeft(text, font, fillStyle, alpha, y) {\n  return atPos(\n    () => 10,\n    () => y || 20,\n    text,\n    font,\n    fillStyle,\n    alpha\n  );\n}\n\n/**\n * Write text to the center of the target canvas\n *\n * @param {String} text - the text to write\n * @param {String} font - same as the CSS font property\n * @param {String} fillStyle\n * @param {Number} alpha - control text transparency\n * @param {Number} y - height in text metrics is not very well supported. This is a manual value\n * @return {Function}\n */\nexport function center(text, font, fillStyle, alpha, y) {\n  return atPos(\n    (target, metrics, ctx) => {ctx.textAlign = 'center'; return  target.width / 2;},\n    (target, metrics, ctx) => {ctx.textBaseline = 'middle'; return target.height / 2; },\n    text,\n    font,\n    fillStyle,\n    alpha\n  );\n}\n"]},"metadata":{},"sourceType":"module"}