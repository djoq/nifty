{"ast":null,"code":"import { identity } from '../functions';\n/**\n * Set the src of an image object and call the resolve function\n * once it has loaded\n *\n * @param {Image} img\n * @param {String} src\n * @param {Function} resolve\n */\n\nfunction setAndResolve(img, src, resolve) {\n  img.onload = function () {\n    return resolve(img);\n  };\n\n  img.src = src;\n}\n/**\n * Given a resource, return an appropriate loading function for it's type\n *\n * @param {String|File|Image} resource\n * @return {Function}\n */\n\n\nexport function getLoader(resource) {\n  var type = typeof resource;\n\n  if (type === 'string') {\n    return loadUrl;\n  }\n\n  if (resource instanceof Image) {\n    return identity;\n  }\n\n  return loadFile;\n}\n/**\n * Used for loading image resources asynchronously and maintaining\n * the supplied order of arguments\n *\n * @param {Array} resources - a mixed array of urls, File objects, or Image objects\n * @param {Function} init - called at the beginning of resource initialization\n * @return {Promise}\n */\n\nexport function load(resources, init) {\n  var promises = [];\n\n  for (var i = 0; i < resources.length; i++) {\n    var resource = resources[i];\n    var loader = getLoader(resource);\n    var promise = loader(resource, init);\n    promises.push(promise);\n  }\n\n  return Promise.all(promises);\n}\n/**\n * Load an image by its url\n *\n * @param {String} url\n * @param {Function} init - an optional image initializer\n * @return {Promise}\n */\n\nexport function loadUrl(url, init) {\n  var img = new Image();\n  typeof init === 'function' && init(img);\n  return new Promise(function (resolve) {\n    img.onload = function () {\n      return resolve(img);\n    };\n\n    img.src = url;\n  });\n}\n/**\n * Return a collection of images from an\n * array of File objects\n *\n * @param {File} file\n * @return {Promise}\n */\n\nexport function loadFile(file) {\n  var reader = new FileReader();\n  return new Promise(function (resolve) {\n    var img = new Image();\n\n    reader.onloadend = function () {\n      return setAndResolve(img, reader.result, resolve);\n    };\n\n    reader.readAsDataURL(file);\n  });\n}\n/**\n * Create a new image, optionally configuring it's onload behavior\n *\n * @param {String} url\n * @param {Function} onload\n * @return {Image}\n */\n\nexport function createImage(url, onload) {\n  var img = new Image();\n\n  if (typeof onload === 'function') {\n    img.onload = onload;\n  }\n\n  img.src = url;\n  return img;\n}\n/**\n * Draw an image to a canvas element\n *\n * @param {Image} img\n * @param {HTMLCanvasElement} canvas\n * @return {HTMLCanvasElement}\n */\n\nfunction drawImage(img, canvas) {\n  var ctx = canvas.getContext('2d');\n  canvas.width = img.width;\n  canvas.height = img.height;\n  ctx.drawImage(img, 0, 0);\n  return canvas;\n}\n/**\n * Convert an Image object to a canvas\n *\n * @param {Image} img\n * @param {CanvasPool} pool\n * @return {HTMLCanvasElement}\n */\n\n\nexport function imageToCanvas(img, pool) {\n  var canvas = pool.pop();\n  return drawImage(img, canvas);\n}\n/**\n * Convert an array of image objects\n * to canvas elements\n *\n * @param {Array} images\n * @param {CanvasPool} pool\n * @return {HTMLCanvasElement[]}\n */\n\nexport function mapToCanvas(images, pool) {\n  return images.map(function (img) {\n    return imageToCanvas(img, pool);\n  });\n}","map":{"version":3,"sources":["/home/danny/apps/sandbox/nifty/node_modules/watermarkjs/lib/image/index.js"],"names":["identity","setAndResolve","img","src","resolve","onload","getLoader","resource","type","loadUrl","Image","loadFile","load","resources","init","promises","i","length","loader","promise","push","Promise","all","url","file","reader","FileReader","onloadend","result","readAsDataURL","createImage","drawImage","canvas","ctx","getContext","width","height","imageToCanvas","pool","pop","mapToCanvas","images","map"],"mappings":"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","sourcesContent":["import {identity} from '../functions'\n\n/**\n * Set the src of an image object and call the resolve function\n * once it has loaded\n *\n * @param {Image} img\n * @param {String} src\n * @param {Function} resolve\n */\nfunction setAndResolve(img, src, resolve) {\n  img.onload = () => resolve(img);\n  img.src = src;\n}\n\n/**\n * Given a resource, return an appropriate loading function for it's type\n *\n * @param {String|File|Image} resource\n * @return {Function}\n */\nexport function getLoader(resource) {\n  const type = typeof(resource);\n\n  if (type === 'string') {\n    return loadUrl;\n  }\n\n  if (resource instanceof Image) {\n    return identity;\n  }\n\n  return loadFile;\n}\n\n/**\n * Used for loading image resources asynchronously and maintaining\n * the supplied order of arguments\n *\n * @param {Array} resources - a mixed array of urls, File objects, or Image objects\n * @param {Function} init - called at the beginning of resource initialization\n * @return {Promise}\n */\nexport function load(resources, init) {\n  let promises = [];\n  for (var i = 0; i < resources.length; i++) {\n    const resource = resources[i];\n    const loader = getLoader(resource);\n    const promise = loader(resource, init);\n    promises.push(promise);\n  }\n  return Promise.all(promises);\n}\n\n/**\n * Load an image by its url\n *\n * @param {String} url\n * @param {Function} init - an optional image initializer\n * @return {Promise}\n */\nexport function loadUrl(url, init) {\n  const img = new Image();\n  (typeof(init) === 'function') && init(img);\n  return new Promise(resolve => {\n    img.onload = () => resolve(img)\n    img.src = url;\n  });\n}\n\n/**\n * Return a collection of images from an\n * array of File objects\n *\n * @param {File} file\n * @return {Promise}\n */\nexport function loadFile(file) {\n  const reader = new FileReader();\n  return new Promise(resolve => {\n    const img = new Image();\n    reader.onloadend = () => setAndResolve(img, reader.result, resolve);\n    reader.readAsDataURL(file);\n  });\n}\n\n/**\n * Create a new image, optionally configuring it's onload behavior\n *\n * @param {String} url\n * @param {Function} onload\n * @return {Image}\n */\nexport function createImage(url, onload) {\n  const img = new Image();\n  if (typeof(onload) === 'function') {\n    img.onload = onload;\n  }\n  img.src = url;\n  return img;\n}\n\n/**\n * Draw an image to a canvas element\n *\n * @param {Image} img\n * @param {HTMLCanvasElement} canvas\n * @return {HTMLCanvasElement}\n */\nfunction drawImage(img, canvas) {\n  const ctx = canvas.getContext('2d');\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n  ctx.drawImage(img, 0, 0);\n  return canvas;\n}\n\n/**\n * Convert an Image object to a canvas\n *\n * @param {Image} img\n * @param {CanvasPool} pool\n * @return {HTMLCanvasElement}\n */\nexport function imageToCanvas(img, pool) {\n  const canvas = pool.pop();\n  return drawImage(img, canvas);\n}\n\n/**\n * Convert an array of image objects\n * to canvas elements\n *\n * @param {Array} images\n * @param {CanvasPool} pool\n * @return {HTMLCanvasElement[]}\n */\nexport function mapToCanvas(images, pool) {\n  return images.map(img => imageToCanvas(img, pool));\n}\n"]},"metadata":{},"sourceType":"module"}