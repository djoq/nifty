{"ast":null,"code":"import { sequence } from '../functions';\nconst url = /^data:([^;]+);base64,(.*)$/;\n/**\n * Split a data url into a content type and raw data\n *\n * @param {String} dataUrl\n * @return {Array}\n */\n\nexport function split(dataUrl) {\n  return url.exec(dataUrl).slice(1);\n}\n/**\n * Decode a base64 string\n *\n * @param {String} base64\n * @return {String}\n */\n\nexport function decode(base64) {\n  return window.atob(base64);\n}\n/**\n * Return a string of raw data as a Uint8Array\n *\n * @param {String} data\n * @return {UInt8Array}\n */\n\nexport function uint8(data) {\n  const length = data.length;\n  const uints = new Uint8Array(length);\n\n  for (let i = 0; i < length; i++) {\n    uints[i] = data.charCodeAt(i);\n  }\n\n  return uints;\n}\n/**\n * Turns a data url into a blob object\n *\n * @param {String} dataUrl\n * @return {Blob}\n */\n\nexport const blob = sequence(split, parts => [decode(parts[1]), parts[0]], blob => new Blob([uint8(blob[0])], {\n  type: blob[1]\n}));","map":{"version":3,"sources":["/home/danny/apps/sandbox/nifty/node_modules/watermarkjs/lib/blob/index.js"],"names":["sequence","url","split","dataUrl","exec","slice","decode","base64","window","atob","uint8","data","length","uints","Uint8Array","i","charCodeAt","blob","parts","Blob","type"],"mappings":"AAAA,SAAQA,QAAR,QAAuB,cAAvB;AAEA,MAAMC,GAAG,GAAG,4BAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,KAAT,CAAeC,OAAf,EAAwB;AAC7B,SAAOF,GAAG,CACPG,IADI,CACCD,OADD,EAEJE,KAFI,CAEE,CAFF,CAAP;AAGD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,MAAT,CAAgBC,MAAhB,EAAwB;AAC7B,SAAOC,MAAM,CAACC,IAAP,CAAYF,MAAZ,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,KAAT,CAAeC,IAAf,EAAqB;AAC1B,QAAMC,MAAM,GAAGD,IAAI,CAACC,MAApB;AACA,QAAMC,KAAK,GAAG,IAAIC,UAAJ,CAAeF,MAAf,CAAd;;AAEA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAApB,EAA4BG,CAAC,EAA7B,EAAiC;AAC/BF,IAAAA,KAAK,CAACE,CAAD,CAAL,GAAWJ,IAAI,CAACK,UAAL,CAAgBD,CAAhB,CAAX;AACD;;AAED,SAAOF,KAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMI,IAAI,GAAGjB,QAAQ,CAC1BE,KAD0B,EAE1BgB,KAAK,IAAI,CAACZ,MAAM,CAACY,KAAK,CAAC,CAAD,CAAN,CAAP,EAAmBA,KAAK,CAAC,CAAD,CAAxB,CAFiB,EAG1BD,IAAI,IAAI,IAAIE,IAAJ,CAAS,CAACT,KAAK,CAACO,IAAI,CAAC,CAAD,CAAL,CAAN,CAAT,EAA2B;AAACG,EAAAA,IAAI,EAAEH,IAAI,CAAC,CAAD;AAAX,CAA3B,CAHkB,CAArB","sourcesContent":["import {sequence} from '../functions';\n\nconst url = /^data:([^;]+);base64,(.*)$/;\n\n/**\n * Split a data url into a content type and raw data\n *\n * @param {String} dataUrl\n * @return {Array}\n */\nexport function split(dataUrl) {\n  return url\n    .exec(dataUrl)\n    .slice(1);\n}\n\n/**\n * Decode a base64 string\n *\n * @param {String} base64\n * @return {String}\n */\nexport function decode(base64) {\n  return window.atob(base64);\n}\n\n/**\n * Return a string of raw data as a Uint8Array\n *\n * @param {String} data\n * @return {UInt8Array}\n */\nexport function uint8(data) {\n  const length = data.length;\n  const uints = new Uint8Array(length);\n\n  for (let i = 0; i < length; i++) {\n    uints[i] = data.charCodeAt(i);\n  }\n\n  return uints;\n}\n\n/**\n * Turns a data url into a blob object\n *\n * @param {String} dataUrl\n * @return {Blob}\n */\nexport const blob = sequence(\n  split,\n  parts => [decode(parts[1]), parts[0]],\n  blob => new Blob([uint8(blob[0])], {type: blob[1]})\n);\n"]},"metadata":{},"sourceType":"module"}